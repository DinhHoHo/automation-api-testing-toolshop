{
	"info": {
		"_postman_id": "fc8970d7-90f0-49eb-bf8c-a82269d26af9",
		"name": "API 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44045492",
		"_collection_link": "https://demo-team-9120.postman.co/workspace/API-Testing~8eead984-ed2d-412f-a35c-9bb70fb3cd13/collection/44045492-fc8970d7-90f0-49eb-bf8c-a82269d26af9?action=share&source=collection_link&creator=44045492"
	},
	"item": [
		{
			"name": "Retrieve specific category",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"// === Set method & URL trực tiếp từ CSV ===\r",
							"const method = (pm.iterationData.get('req_method') || 'GET').toUpperCase();\r",
							"const path   = pm.iterationData.get('req_path') || '/categories/1';\r",
							"\r",
							"// Ghép baseUrl + path (tránh trùng dấu '/')\r",
							"const base = (pm.environment.get('baseUrl') || '').replace(/\\/$/, '');\r",
							"const fullUrl = base + (path.startsWith('/') ? path : '/' + path);\r",
							"\r",
							"pm.request.method = method;\r",
							"pm.request.url    = fullUrl;\r",
							"\r",
							"// GET thì không gửi body\r",
							"if (method === 'GET') {\r",
							"  pm.request.body = null;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// === Lấy dữ liệu từ CSV ===\r",
							"const expectedStatus  = Number(pm.iterationData.get('expected_status'));\r",
							"const expectedMessage = pm.iterationData.get('expected_message') || '';\r",
							"const categoryId      = pm.iterationData.get('categoryId') || '';\r",
							"\r",
							"// (1) Luôn kiểm tra HTTP status code\r",
							"pm.test(`HTTP status is ${expectedStatus}`, () => {\r",
							"  pm.response.to.have.status(expectedStatus);\r",
							"});\r",
							"\r",
							"// (2) Nếu CSV có expected_message thì kiểm message (404/405)\r",
							"if (expectedMessage) {\r",
							"  pm.test('Message matches expected text', () => {\r",
							"    pm.expect(pm.response.text()).to.include(expectedMessage);\r",
							"  });\r",
							"}\r",
							"\r",
							"// (3) Nếu 200: kiểm payload schema + (tuỳ chọn) id khớp categoryId nếu là số\r",
							"if (expectedStatus === 200) {\r",
							"  pm.test('Payload has fields: id, parent_id, name, slug', () => {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body).to.have.property('id');\r",
							"    pm.expect(body).to.have.property('parent_id');\r",
							"    pm.expect(body).to.have.property('name').that.is.a('string').and.not.empty;\r",
							"    pm.expect(body).to.have.property('slug').that.is.a('string').and.not.empty;\r",
							"  });\r",
							"\r",
							"  if (categoryId && !isNaN(Number(categoryId))) {\r",
							"    pm.test(`Payload.id equals ${categoryId}`, () => {\r",
							"      const body = pm.response.json();\r",
							"      pm.expect(body).to.have.property('id', Number(categoryId));\r",
							"    });\r",
							"  }\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/categories/:categoryId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories",
						":categoryId"
					],
					"variable": [
						{
							"key": "categoryId",
							"value": ""
						}
					]
				},
				"description": "Retrieve specific category"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}